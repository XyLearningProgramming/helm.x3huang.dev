# helmfile.yaml
helmDefaults:
  timeout: 3600
  wait: true
  atomic: true

# Environment-specific settings
environments:
  default:
    values:
      - values/default.yaml
  prod:
    values:
      - values/prod.yaml
---
# Repositories
repositories:
  - name: jetstack
    url: https://charts.jetstack.io
  - name: prometheus-community
    url: https://prometheus-community.github.io/helm-charts
  - name: docker-mailserver
    url: https://docker-mailserver.github.io/docker-mailserver-helm/
---
# Cert-Manager Chart
releases:
  - name: cert-manager
    namespace: cert-manager
    chart: jetstack/cert-manager
    version: v1.11.0
    installed: true
    values:
      - values/{{ .Environment.Name }}.yaml
      - namespace: cert-manager
      - resources:
          limits:
            cpu: "200m"  # (0.2 vCPU)
            memory: "256Mi"  # (256 MiB)
    set:
      # one time install crd first
      # kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.crds.yaml
      - name: installCRDs
        value: false
      - name: prometheus.enabled
        value: false
      - name: webhook.timeoutSeconds
        value: 10

# Dummy Service
  - name: dummy-page
    namespace: default
    chart: ./dummy-page
    values:
      - values/{{ .Environment.Name }}.yaml
      - namespace: default

# Ingress Settings
  - name: ingress
    namespace: default
    chart: ./ingress-cert
    needs:
      - cert-manager/cert-manager
      - default/dummy-page
    values:
      - values/{{ .Environment.Name }}.yaml
      - namespace: default

# Kube system: traefik metrics 
  - name: kube-system
    namespace: kube-system
    chart: ./kube-system
    values:
      - values/{{ .Environment.Name }}.yaml

# Prometheus stack
  - name: kube-prom-stack
    namespace: monitoring
    chart: prometheus-community/kube-prometheus-stack
    needs:
      - kube-system/kube-system
    version: "72.6.3"              # match latest in helmfile.lock :contentReference[oaicite:3]{index=3}
    # install crds
    # 
    # ref: https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack/10.0.1
    # 
    # kubectl apply -f https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.82.2/stripped-down-crds.yaml
    #
    # kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.82/example/prometheus-operator-crd/monitoring.coreos.com_alertmanagers.yaml
    # kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.82/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml
    # kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.82/example/prometheus-operator-crd/monitoring.coreos.com_prometheuses.yaml
    # kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.82/example/prometheus-operator-crd/monitoring.coreos.com_prometheusrules.yaml
    # kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.82/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml
    # kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.82/example/prometheus-operator-crd/monitoring.coreos.com_thanosrulers.yaml
    # kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/release-0.82/example/prometheus-operator-crd/monitoring.coreos.com_probes.yaml
    values:
      - values/{{ .Environment.Name }}.yaml
      - prom-stack/values.yaml.gotmpl
    set:
      - name: installCRDs
        value: false

  # Mail Server
  - name: mailserver
    namespace: mail
    chart: docker-mailserver/docker-mailserver
    version: 1.2.0
    needs:
      - cert-manager/cert-manager
    values:
      - values/{{ .Environment.Name }}.yaml
      - namespace: mail
      # Mail server configuration
      - docker-mailserver:
          # TLS and domain settings
          deployment:
            env:
              OVERRIDE_HOSTNAME: mail.{{ .Values.DOMAIN }}
              POSTMASTER_ADDRESS: postmaster@{{ .Values.DOMAIN }}
              SSL_TYPE: manual
              # Security settings
              ENABLE_CLAMAV: 1
              ENABLE_SPAMASSASSIN: 1
              SPAMASSASSIN_SPAM_TO_INBOX: 0
              ENABLE_FAIL2BAN: 1
              ENABLE_POSTGREY: 1
              # Secure defaults - Anti-relay protection
              PERMIT_DOCKER: none
              POSTSCREEN_ACTION: enforce
              # Only accept mail for our domain
              POSTFIX_MYDESTINATION: ""  # Don't accept mail for bare hostname
              POSTFIX_DESTINATION_CONCURRENCY_LIMIT: 1  # Limit concurrent deliveries
              POSTFIX_DESTINATION_RATE_DELAY: 1s  # Add delay between deliveries
              POSTFIX_SMTPD_RECIPIENT_RESTRICTIONS: "permit_sasl_authenticated,permit_mynetworks,reject_unauth_destination,reject"
              ENABLE_POP3: 0
              POSTFIX_MESSAGE_SIZE_LIMIT: 25600000  # Limit messages to 25MB
              # POSTFIX_INET_PROTOCOLS: ipv4  # Disable IPv6 if not needed
              # Authentication required for sending
              SMTP_ONLY: 0
              ENABLE_SASLAUTHD: 0  # Use Dovecot authentication
              POSTFIX_REJECT_UNKNOWN_CLIENT_HOSTNAME: 1  # Reject clients without proper DNS
              PERMIT_EMPTY_SENDER_DOMAIN: 0  # Reject emails with empty sender domain
              # Anti-spam measures
              ENABLE_POSTFIX_VIRTUAL_TRANSPORT: 1  # Required for proper mail routing
              SPAMASSASSIN_KILL_SCORE: 15  # Auto-reject very spammy messages
              # DKIM signing
              ENABLE_OPENDKIM: 1
              ENABLE_OPENDMARC: 1
              ENABLE_POLICYD_SPF: 1
          
          # Resources
          resources:
            limits:
              cpu: "100m"
              memory: "256Mi"
          
          # Use existing secret for mail config
          existingSecret: helmfile-secret
          
          # Certificate settings
          certificate:
            enabled: true
            issuerRef:
              name: letsencrypt-prod
              kind: ClusterIssuer
            hosts:
              - mail.{{ .Values.DOMAIN }}
              # - imap.{{ .Values.DOMAIN }}
              # - smtp.{{ .Values.DOMAIN }}
          
          # Persistence settings
          persistence:
            mail-data:
              enabled: true
              size: 10Gi
            mail-state:
              enabled: true
              size: 1Gi

          # Mount aliases file
          configMaps:
            aliases:
              create: true
              path: "aliases"
              data: |
                # Forward admin and postmaster to info
                admin@{{ .Values.DOMAIN }} info@{{ .Values.DOMAIN }}
                postmaster@{{ .Values.DOMAIN }} info@{{ .Values.DOMAIN }}
                abuse@{{ .Values.DOMAIN }} info@{{ .Values.DOMAIN }}
                hostmaster@{{ .Values.DOMAIN }} info@{{ .Values.DOMAIN }}
